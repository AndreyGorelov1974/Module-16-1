/*Задание 1. Спидометр
Что нужно сделать
Реализуйте цифровой спидометр автомобиля. Сама модель автомобиля, которую нужно будет воссоздать, весьма проста.
Начальная скорость — 0 км/ч.
Пользователь вводит в стандартный ввод разницу (дельту) в скорости, и результирующая скорость показывается на спидометре в стандартный вывод.
Так происходит до той поры, пока машина снова не остановится,
то есть пока скорость не станет меньше или равна нулю (сравнение должно происходить с дельтой в 0,01).
Диапазон возможных значений скорости машины от 0 до 150 км/ч.
Сам показатель спидометра вместе с единицами измерения требуется записывать в отдельную строку-буфер,
которая потом и будет показываться на экране. Точность отображения скорости — до 0,1 км/ч.

Рекомендации
Используйте цикл do … while для организации постоянного опроса пользователя.
Для отображения числа с нужной точностью воспользуйтесь функцией std::sprintf(speed_str, "%.1f", speed_value);
где speed_str — строка, в которую функция sprintf «печатает» значение скорости (speed_value) с одним знаком после десятичной точки (%.1f).*/

#include <iostream>

//точность сравнения
const float epsilon = 0.01f;
//максимальнаяскорость машины
const float maxSpeed = 150.0f;

int main()
{
	//начальная скорость
	float currentSpeed = 0.0f;
	//изменение скорости
	float deltaSpeed = 0.0f;
	//строка для вывода скорости
	char speedStr[4];

	
	//основной цикл продолжается пока скорость не вернётсяк 0 с заданной точностью
	do {
		std::sprintf(speedStr, "%.1f", currentSpeed);
		std::cout << "Current vehicle speed: " << speedStr << std::endl;
		//ввод изменения скорости
		std::cout << "Enter the vehicle speed change: ";
		std::cin >> deltaSpeed;
		currentSpeed += deltaSpeed;
		//машина не может разогнаться быстрее 150 км/ч
		if ((currentSpeed - maxSpeed) > epsilon) {
			currentSpeed = maxSpeed;			
		}	
	} while (currentSpeed > epsilon);
}